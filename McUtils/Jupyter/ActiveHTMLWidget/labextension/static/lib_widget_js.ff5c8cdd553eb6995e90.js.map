{"version":3,"file":"lib_widget_js.ff5c8cdd553eb6995e90.js","mappings":";;;;;;;;;AAAa;AACb;AACA;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,mBAAmB,GAAG,sBAAsB;AAC5C;AACA;AACA;AACA,aAAa,mBAAO,CAAC,uCAAiB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA,mBAAmB;AACnB;;;;;;;;;;;ACpBa;AACb;AACA;AACA;AACA,6CAA6C;AAC7C;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,sBAAsB,GAAG,uBAAuB;AAChD,eAAe,mBAAO,CAAC,oFAAuB;AAC9C,kBAAkB,mBAAO,CAAC,mCAAW;AACrC,kBAAkB,mBAAO,CAAC,wEAAiB;AAC3C,oBAAoB,mBAAO,CAAC,4EAAmB;AAC/C,oBAAoB,mBAAO,CAAC,4EAAmB;AAC/C,iCAAiC,mBAAO,CAAC,oDAAQ;AACjD;AACA,mBAAO,CAAC,2CAAmB;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD,gCAAgC;AAClF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,uBAAuB,6ZAA6Z,uBAAuB,uFAAuF;AAC/kB;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA,uBAAuB;AACvB,4DAA4D;AAC5D;AACA;AACA,gBAAgB,qCAAqC;AACrD;AACA;AACA;AACA,8CAA8C;AAC9C,qDAAqD;AACrD;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,iBAAiB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC;AACrC,kCAAkC;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD,YAAY;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACbiCAAiC;AACjC;AACA;AACA,8BAA8B;AAC9B;AACA;AACA,2BAA2B;AAC3B;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sEAAsE,oBAAoB;AAC1F;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C,oBAAoB;AACnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;;;;;;;;;;AChfA;AACA,kCAAkC,mBAAO,CAAC,qGAAgD;AAC1F;AACA;AACA,0CAA0C,oCAAoC,qBAAqB,GAAG;AACtG;AACA;;;;;;;;;;;ACNA,UAAU,mBAAO,CAAC,oJAAwE;AAC1F,0BAA0B,mBAAO,CAAC,qHAAuD;;AAEzF;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;;;AAIA","sources":["webpack://ActiveHTMLWidget/./lib/version.js","webpack://ActiveHTMLWidget/./lib/widget.js","webpack://ActiveHTMLWidget/./css/widget.css","webpack://ActiveHTMLWidget/./css/widget.css?a195"],"sourcesContent":["\"use strict\";\n// Copyright (c) b3m2a1\n// Distributed under the terms of the Modified BSD License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.MODULE_NAME = exports.MODULE_VERSION = void 0;\n// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-ignore\n// eslint-disable-next-line @typescript-eslint/no-var-requires\nconst data = require('../package.json');\n/**\n * The _model_module_version/_view_module_version this package implements.\n *\n * The html widget manager assumes that this is the same as the npm package\n * version number.\n */\nexports.MODULE_VERSION = data.version;\n/*\n * The current package name.\n */\nexports.MODULE_NAME = data.name;\n//# sourceMappingURL=version.js.map","\"use strict\";\n// Copyright (c) b3m2a1\n// Distributed under the terms of the Modified BSD License.\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ActiveHTMLView = exports.ActiveHTMLModel = void 0;\nconst base_1 = require(\"@jupyter-widgets/base\");\nconst version_1 = require(\"./version\");\nconst widgets_1 = require(\"@lumino/widgets\");\nconst algorithm_1 = require(\"@lumino/algorithm\");\nconst messaging_1 = require(\"@lumino/messaging\");\nconst jquery_1 = __importDefault(require(\"jquery\"));\n// Import the CSS\nrequire(\"../css/widget.css\");\nclass LayoutManagerWidget extends widgets_1.Widget {\n    constructor(options) {\n        let view = options.view;\n        //@ts-ignore\n        options.tag = view.tagName;\n        super(options);\n        this._view = view;\n        this.layout = new widgets_1.PanelLayout({ fitPolicy: 'set-no-constraint' });\n    }\n    dispose() {\n        if (this.isDisposed) {\n            return;\n        }\n        super.dispose();\n        if (this._view) {\n            this._view.remove();\n        }\n        //@ts-ignore\n        this._view = null;\n    }\n    processMessage(msg) {\n        super.processMessage(msg);\n        this._view.processPhosphorMessage(msg);\n    }\n    get widgets() {\n        return this.layout.widgets;\n    }\n    addWidget(widget) {\n        this.layout.addWidget(widget);\n    }\n    insertWidget(index, widget) {\n        this.layout.insertWidget(index, widget);\n    }\n}\nclass ActiveHTMLModel extends base_1.DOMWidgetModel {\n    defaults() {\n        return Object.assign(Object.assign({}, super.defaults()), { _model_name: ActiveHTMLModel.model_name, _model_module: ActiveHTMLModel.model_module, _model_module_version: ActiveHTMLModel.model_module_version, _view_name: ActiveHTMLModel.view_name, _view_module: ActiveHTMLModel.view_module, _view_module_version: ActiveHTMLModel.view_module_version, tagName: 'div', children: [], classList: [], innerHTML: \"\", textContent: \"\", _bodyType: \"\", _debugPrint: false, styleDict: {}, elementAttributes: {}, id: \"\", value: \"\", trackInput: false, continuousUpdate: true, eventPropertiesDict: {}, defaultEventProperties: [\n                \"bubbles\", \"cancelable\", \"composed\",\n                \"target\", \"timestamp\", \"type\",\n                \"key\", \"repeat\",\n                \"button\", \"buttons\",\n                \"alKey\", \"shiftKey\", \"ctrlKey\", \"metaKey\"\n            ] });\n    }\n}\nexports.ActiveHTMLModel = ActiveHTMLModel;\nActiveHTMLModel.serializers = Object.assign(Object.assign({}, base_1.DOMWidgetModel.serializers), { \n    // Add any extra serializers here\n    //@ts-ignore\n    children: { deserialize: base_1.unpack_models } });\nActiveHTMLModel.model_name = 'ActiveHTMLModel';\nActiveHTMLModel.model_module = version_1.MODULE_NAME;\nActiveHTMLModel.model_module_version = version_1.MODULE_VERSION;\nActiveHTMLModel.view_name = 'ActiveHTMLView'; // Set to null if no view\nActiveHTMLModel.view_module = version_1.MODULE_NAME; // Set to null if no view\nActiveHTMLModel.view_module_version = version_1.MODULE_VERSION;\nclass ActiveHTMLView extends base_1.DOMWidgetView {\n    // constructDict(listPair:any) {\n    //     let res = {};\n    //     let keys = listPair[0];\n    //     let vals = listPair[1];\n    //     for (let i = 0; i < keys.length; i++) {\n    //         //@ts-ignore\n    //         res[keys[i]] = vals[i];\n    //     }\n    //     return res;\n    // }\n    initialize(parameters) {\n        super.initialize(parameters);\n        //@ts-ignore\n        this.children_views = new base_1.ViewList(this.add_child_model, null, this);\n        this.listenTo(this.model, 'change:children', this.updateBody);\n        this.listenTo(this.model, 'change:innerHTML', this.updateBody);\n        this.listenTo(this.model, 'change:textContent', this.updateBody);\n        this.listenTo(this.model, 'change:styleDict', this.updateStyles);\n        this.listenTo(this.model, 'change:classList', this.updateClassList);\n        this.listenTo(this.model, 'change:value', this.updateValue);\n        this.listenTo(this.model, 'change:elementAttributes', this.updateAttributes);\n        this.listenTo(this.model, 'change:eventPropertiesDict', this.updateEvents);\n        this._currentEvents = {};\n        this._currentClasses = new Set();\n        this._currentStyles = new Set();\n    }\n    removeStyles() {\n        let newStyles = this.model.get(\"styleDict\");\n        let current = this._currentStyles;\n        for (let prop of current) {\n            if (!newStyles.hasOwnProperty(prop)) {\n                this.el.style.removeProperty(prop);\n                this._currentStyles.delete(prop);\n            }\n        }\n    }\n    setLayout(layout, oldLayout) { } // null override\n    setStyle(style, oldStyle) { } // null override\n    setStyles() {\n        let elementStyles = this.model.get(\"styleDict\");\n        if (elementStyles.length === 0) {\n            this._currentStyles.clear();\n            this.el.removeAttribute('style');\n        }\n        else {\n            if (this.model.get(\"_debugPrint\")) {\n                console.log(this.el, \"Element Styles:\", elementStyles);\n            }\n            for (let prop in elementStyles) {\n                if (elementStyles.hasOwnProperty(prop)) {\n                    // console.log(\">>>\", prop, elementStyles[prop], typeof prop);\n                    this.el.style.setProperty(prop, elementStyles[prop]);\n                    // console.log(\"<<<\", prop, this.el.style.getPropertyValue(prop));\n                    this._currentStyles.add(prop);\n                }\n            }\n        }\n    }\n    updateStyles() {\n        this.setStyles();\n        this.removeStyles();\n    }\n    setClasses() {\n        if (this.model.get(\"_debugPrint\")) {\n            console.log(this.el, \"Element Classes:\", this.model.get(\"classList\"));\n        }\n        let classList = this.model.get(\"classList\");\n        for (let cls of classList) {\n            this.el.classList.add(cls);\n            this._currentClasses.add(cls);\n        }\n    }\n    removeClasses() {\n        if (this.model.get(\"_debugPrint\")) {\n            console.log(this.el, \"Element Classes:\", this.model.get(\"classList\"));\n        }\n        let current = this._currentClasses;\n        let classes = this.model.get(\"classList\");\n        for (let prop of current) {\n            if (!classes.includes(prop)) {\n                this.el.classList.remove(prop);\n                this._currentClasses.delete(prop);\n            }\n        }\n    }\n    updateClassList() {\n        this.setClasses();\n        this.removeClasses();\n    }\n    //manage body of element (borrowed from ipywidgets.Box)\n    _createElement(tagName) {\n        this.pWidget = new LayoutManagerWidget({ view: this });\n        return this.pWidget.node;\n    }\n    _setElement(el) {\n        if (this.el || el !== this.pWidget.node) {\n            // Boxes don't allow setting the element beyond the initial creation.\n            throw new Error('Cannot reset the DOM element.');\n        }\n        this.el = this.pWidget.node;\n        this.$el = jquery_1.default(this.pWidget.node);\n    }\n    update_children() {\n        if (this.children_views !== null) {\n            this.children_views.update(this.model.get('children')).then((views) => {\n                // Notify all children that their sizes may have changed.\n                views.forEach((view) => {\n                    messaging_1.MessageLoop.postMessage(view.pWidget, widgets_1.Widget.ResizeMessage.UnknownSize);\n                });\n            });\n        }\n    }\n    add_child_model(model) {\n        // we insert a dummy element so the order is preserved when we add\n        // the rendered content later.\n        let dummy = new widgets_1.Widget();\n        //@ts-ignore\n        this.pWidget.addWidget(dummy);\n        return this.create_child_view(model).then((view) => {\n            // replace the dummy widget with the new one.\n            //@ts-ignore\n            let i = algorithm_1.ArrayExt.firstIndexOf(this.pWidget.widgets, dummy);\n            //@ts-ignore\n            this.pWidget.insertWidget(i, view.pWidget);\n            dummy.dispose();\n            return view;\n        }).catch(base_1.reject('Could not add child view to box', true));\n    }\n    remove() {\n        this.children_views = null;\n        super.remove();\n    }\n    updateBody() {\n        let children = this.model.get('children');\n        let debug = this.model.get(\"_debugPrint\");\n        if (children.length > 0) {\n            if (debug) {\n                console.log(this.el, \"Updating Children...\");\n            }\n            this.update_children();\n        }\n        else {\n            let html = this.model.get(\"innerHTML\");\n            if (html.length > 0) {\n                if (debug) {\n                    console.log(this.el, \"Updating HTML...\");\n                }\n                this.updateInnerHTML();\n            }\n            else {\n                let text = this.model.get(\"textContent\");\n                if (text.length > 0) {\n                    if (debug) {\n                        console.log(this.el, \"Updating Text...\");\n                    }\n                    this.updateTextContent();\n                }\n                else {\n                    if (debug) {\n                        console.log(this.el, \"Updating HTML...\");\n                    }\n                    this.updateInnerHTML();\n                }\n            }\n        }\n    }\n    updateInnerHTML() {\n        // let bodyType = this.model.get('_bodyType');\n        // if (bodyType !== \"html\") {\n        //   this.resetBody();\n        // }\n        let val = this.model.get(\"innerHTML\");\n        let cur = this.el.innerHTML;\n        if (val !== cur) {\n            this.el.innerHTML = val;\n        }\n        // if (bodyType !== \"html\") {\n        //   this.model.set('_bodyType', \"html\");\n        // }\n    }\n    updateTextContent() {\n        // let bodyType = this.model.get('_bodyType');\n        // if (bodyType !== \"html\") {\n        //   this.resetBody(bodyType);\n        // }\n        let val = this.model.get(\"textContent\");\n        let cur = this.el.textContent;\n        if (val !== cur) {\n            this.el.textContent = val;\n        }\n        // if (bodyType !== \"html\") {\n        //   this.model.set('_bodyType', \"html\");\n        // }\n    }\n    // Setting attributes (like id)\n    updateAttribute(attrName) {\n        let val = this.model.get(attrName);\n        if (val === \"\") {\n            this.el.removeAttribute(attrName);\n        }\n        else {\n            this.el.setAttribute(attrName, val);\n        }\n    }\n    updateAttributeFromQuery(attrName, queryName) {\n        let val = this.model.get(queryName);\n        if (val === \"\") {\n            this.el.removeAttribute(attrName);\n        }\n        else {\n            this.el.setAttribute(attrName, val);\n        }\n    }\n    updateAttributes() {\n        let attrs = this.model.get('elementAttributes');\n        let debug = this.model.get(\"_debugPrint\");\n        if (debug) {\n            console.log(this.el, \"Element Properties:\", attrs);\n        }\n        for (let prop in attrs) {\n            let val = attrs[prop];\n            if (val === \"\") {\n                this.el.removeAttribute(prop);\n            }\n            else {\n                this.el.setAttribute(prop, val);\n            }\n        }\n    }\n    updateValue() {\n        let el = this.el;\n        if (el !== undefined) {\n            let is_checkbox = el.getAttribute('type') === 'checkbox';\n            if (is_checkbox) {\n                let checked = el.checked;\n                if (checked !== undefined) {\n                    let newVal = this.model.get('value');\n                    let checkVal = newVal.length > 0 && newVal != \"false\" && newVal != \"0\";\n                    if (checkVal !== checked) {\n                        el.checked = newVal;\n                    }\n                }\n            }\n            else {\n                let val = el.value;\n                if (val !== undefined) {\n                    let newVal = this.model.get('value');\n                    if (newVal !== val) {\n                        el.value = newVal;\n                    }\n                }\n            }\n        }\n    }\n    setEvents() {\n        let listeners = this.model.get('eventPropertiesDict');\n        let debug = this.model.get(\"_debugPrint\");\n        if (debug) {\n            console.log(this.el, \"Adding Events:\", listeners);\n        }\n        for (let key in listeners) {\n            if (listeners.hasOwnProperty(key)) {\n                if (!this._currentEvents.hasOwnProperty(key)) {\n                    this._currentEvents[key] = [\n                        listeners[key],\n                        this.constructEventListener(key, listeners[key])\n                    ];\n                    this.el.addEventListener(key, this._currentEvents[key][1]);\n                }\n                else if (this._currentEvents[key][0] !== listeners[key]) {\n                    this.el.removeEventListener(key, this._currentEvents[key][1]);\n                    this._currentEvents[key] = [\n                        listeners[key],\n                        this.constructEventListener(key, listeners[key])\n                    ];\n                    this.el.addEventListener(key, this._currentEvents[key][1]);\n                }\n            }\n        }\n    }\n    removeEvents() {\n        let newListeners = this.model.get('eventPropertiesDict');\n        let current = this._currentEvents;\n        let debug = this.model.get(\"_debugPrint\");\n        for (let prop in current) {\n            if (current.hasOwnProperty(prop)) {\n                if (!newListeners.hasOwnProperty(prop)) {\n                    if (debug) {\n                        console.log(this.el, \"Removing Event:\", prop);\n                    }\n                    this.el.removeEventListener(prop, this._currentEvents[prop][1]);\n                    this._currentEvents.delete(prop);\n                }\n            }\n        }\n    }\n    updateEvents() {\n        this.setEvents();\n        this.removeEvents();\n    }\n    render() {\n        super.render();\n        this.el.classList.remove('lm-Widget', 'p-Widget');\n        this.update();\n    }\n    update() {\n        this.updateBody();\n        // this.updateTextContent();\n        this.updateAttribute('id');\n        this.updateValue();\n        this.updateAttributes();\n        this.updateClassList();\n        this.setStyles();\n        this.setEvents();\n        // this.el.classList = this.model.get(\"classList\");\n    }\n    // @ts-ignore\n    get tagName() {\n        // We can't make this an attribute with a default value\n        // since it would be set after it is needed in the\n        // constructor.\n        return this.model.get('tagName');\n    }\n    // Adapted from the \"TextView\" from the core package\n    events() {\n        let events = {};\n        if (this.model.get('trackInput')) {\n            // let tagName = this.model.get('tagName');\n            let key = 'keydown'; // '.concat(tagName);\n            //@ts-ignore\n            events[key] = 'handleKeyDown';\n            key = 'keypress'; // '.concat(tagName);\n            //@ts-ignore\n            events[key] = 'handleKeypress';\n            key = 'input'; // '.concat(tagName);\n            //@ts-ignore\n            events[key] = 'handleChanging';\n            key = 'change'; // '.concat(tagName);\n            //@ts-ignore\n            events[key] = 'handleChanged';\n        }\n        return events;\n    }\n    handleKeyDown(e) {\n        e.stopPropagation();\n    }\n    handleKeypress(e) {\n        e.stopPropagation();\n    }\n    handleChanging(e) {\n        if (this.model.get('continuousUpdate')) {\n            this.handleChanged(e);\n        }\n    }\n    handleChanged(e) {\n        let target = e.target;\n        let is_checkbox = this.el.getAttribute('type') === 'checkbox';\n        if (is_checkbox) {\n            let checked = target.checked;\n            if (checked !== undefined) {\n                this.model.set('value', checked ? \"true\" : \"false\", { updated_view: this });\n                this.touch();\n            }\n        }\n        else {\n            let val = target.value;\n            if (val !== undefined) {\n                this.model.set('value', val, { updated_view: this });\n                this.touch();\n            }\n        }\n    }\n    constructEventListener(eventName, props) {\n        let parent = this;\n        return function (e) {\n            let debug = parent.model.get('_debugPrint');\n            if (debug) {\n                console.log(parent.el, \"Handling event:\", eventName);\n            }\n            // console.log(\"|\", eventName, props);\n            parent.sendEventMessage(e, parent.constructEventMessage(e, props, eventName));\n        };\n    }\n    constructEventMessage(e, props, eventName) {\n        if (props === undefined || props === null) {\n            props = this.model.get('defaultEventProperties');\n        }\n        if (props === undefined) {\n            props = ['target'];\n        }\n        let eventMessage = {};\n        if (eventName !== undefined) {\n            eventMessage['eventName'] = eventName;\n        }\n        for (let p of props) {\n            // @ts-ignore\n            let val = e[p];\n            if (p === \"target\") {\n                val = {};\n                let t = e.target;\n                val['tag'] = t.tagName;\n                val['innerHTML'] = t.innerHTML;\n                for (let p of t.getAttributeNames()) {\n                    val[p] = t.getAttribute(p);\n                }\n            }\n            eventMessage[p] = val;\n        }\n        return eventMessage;\n    }\n    sendEventMessage(e, message) {\n        e.stopPropagation();\n        if (message === undefined) {\n            message = this.constructEventMessage(e);\n        }\n        let debug = this.model.get('_debugPrint');\n        if (debug) {\n            console.log(this.el, \"Sending message:\", message);\n        }\n        this.send(message);\n    }\n}\nexports.ActiveHTMLView = ActiveHTMLView;\n//# sourceMappingURL=widget.js.map","// Imports\nvar ___CSS_LOADER_API_IMPORT___ = require(\"../node_modules/css-loader/dist/runtime/api.js\");\nexports = ___CSS_LOADER_API_IMPORT___(false);\n// Module\nexports.push([module.id, \".custom-widget {\\n  background-color: lightseagreen;\\n  padding: 0px 2px;\\n}\\n\", \"\"]);\n// Exports\nmodule.exports = exports;\n","var api = require(\"!../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\");\n            var content = require(\"!!../node_modules/css-loader/dist/cjs.js!./widget.css\");\n\n            content = content.__esModule ? content.default : content;\n\n            if (typeof content === 'string') {\n              content = [[module.id, content, '']];\n            }\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\n\nmodule.exports = content.locals || {};"],"names":[],"sourceRoot":""}